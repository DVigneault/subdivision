# derivatives_symbolic.py

# Imports
import argparse
import numpy as np
import sympy as sp
from itertools import count

import doosabin
from common import example_extraordinary_patch

# Use a symbolic backend for `doosabin`.
doosabin.g = sp

# Global symbols.
u, v = sp.symbols('u v')

# recursive_evaluate_basis
def recursive_evaluate_basis(p, b, N, k):
    A_ = sp.Matrix(doosabin.bigger_subdivision_matrix(N))
    P3 = sp.Matrix(doosabin.picker_matrix(N, 3))
    A_Anm1 = A_
    for i in count(1):
        yield 2**(p * i) * b.T * (
            sp.Matrix(doosabin.picker_matrix(N, k)) * A_Anm1)
        A_Anm1 = A_ * P3 * A_Anm1

# du_du_k_0
def du_du_k_0(N):
    # `b` and `p` corresponding to `biquadratic_bspline_du_du_basis`.
    p = 2
    h = sp.S.Half
    b = sp.Matrix([-1, -1, h, h, 0, 0, 0, h, h])
    return recursive_evaluate_basis(p, b, N, 0)

# du_k_0
def du_k_0(N):
    # `b` and `p` corresponding to `biquadratic_bspline_du_basis` for
    # v = 0.
    p = 1
    b = sp.Matrix([
        doosabin.biquadratic_bspline_basis_i(
            doosabin.uniform_quadratic_bspline_first_derivative_basis,
            doosabin.uniform_quadratic_bspline_position_basis,
            u, v, i)
         for i in range(doosabin.NUM_BIQUADRATIC_BSPLINE_BASIS)
        ]).subs({v : 0})
    return recursive_evaluate_basis(p, b, N, 0)

# main
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('N', nargs='?', type=int, default=6)
    parser.add_argument('n', nargs='?', type=int, default=16)
    args = parser.parse_args()

    # Generate example extraordinary patch with an extraordinary face of `N`
    # sides.
    print 'N:', args.N
    X = example_extraordinary_patch(args.N)
    np.random.seed(1337)
    X += 0.1 * np.random.randn(X.size).reshape(X.shape)

    generators_and_subs = [('biquadratic_bspline_du_basis', du_k_0, {u : 1}),
                           ('biquadratic_bspline_du_du_basis', du_du_k_0, {})]
    for name, g, subs in generators_and_subs:
        print '%s:' % name

        # Ignore first subdivision so that the reported results correspond with
        # those generated by derivatives_numeric.py (which implicitly skips the
        # first subdivision due to the calculation for `n` in
        # `transform_u_to_subdivided_patch`).
        g = g(args.N)
        next(g)
        for i in range(args.n):
            b = next(g).subs(subs)
            q = np.dot(map(np.float64, b), X)
            print '  (2^%d, 0) -> (%+.3e, %+.3e) <%.3e>' % (
                -(i + 1), q[0], q[1], np.linalg.norm(q))

if __name__ == '__main__':
    main()
